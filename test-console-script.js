// –°–∫–æ–ø–∏—Ä—É–π –∏ –≤—Å—Ç–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

console.log("üß™ Testing Intro Rectangles Mobile Logic\n");

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ –∏ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤
const width = window.innerWidth;
const isSmallest = width <= 600;
const isMobile = width <= 899;

console.log("üìè Screen Info:");
console.log(`  Width: ${width}px`);
console.log(
  `  Smallest breakpoints (‚â§600px): ${isSmallest ? "‚úÖ YES" : "‚ùå NO"}`
);
console.log(`  Mobile layout (‚â§899px): ${isMobile ? "‚úÖ YES" : "‚ùå NO"}`);
console.log(`  Desktop (‚â•900px): ${!isMobile ? "‚úÖ YES" : "‚ùå NO"}\n`);

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è rectangles
const squares = document.querySelectorAll(".intro-square");
console.log(`üî≤ Rectangles found: ${squares.length}`);

if (squares.length > 0) {
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤
  console.log("\nüì¶ CSS Classes:");
  squares.forEach((square, i) => {
    const hasSmallest = square.classList.contains("intro-square--smallest");
    const hasMobile = square.classList.contains("intro-square--mobile");
    const isActive =
      square.classList.contains("intro-square--smallest-active") ||
      square.classList.contains("intro-square--mobile-active");

    console.log(`  Rectangle ${i}:`);
    console.log(`    - smallest class: ${hasSmallest ? "‚úÖ" : "‚ùå"}`);
    console.log(`    - mobile class: ${hasMobile ? "‚úÖ" : "‚ùå"}`);
    console.log(`    - active: ${isActive ? "‚úÖ" : "‚ùå"}`);
  });
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ diamond (–µ—Å–ª–∏ –µ—Å—Ç—å)
const activeDiamond = document.querySelector(".intro-active-diamond--smallest");
if (activeDiamond) {
  console.log("\nüíé Active Diamond (smallest):");
  const styles = getComputedStyle(activeDiamond);
  console.log(`  Position: ${styles.position}`);
  console.log(`  Width: ${styles.width}`);
  console.log(`  Height: ${styles.height}`);
  console.log(`  Z-index: ${styles.zIndex}`);
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
const closeBtn = document.querySelector(".intro-active-close");
if (closeBtn) {
  console.log("\n‚ùå Close Button:");
  const styles = getComputedStyle(closeBtn);
  console.log(`  Display: ${styles.display}`);
  console.log(`  Position: ${styles.position}`);
  console.log(`  Bottom: ${styles.bottom}`);
} else {
  console.log("\n‚ùå Close Button: Not found (expected on mobile ‚â§899px)");
}

// 6. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–∫–∞
window.testRectangleClick = function (index = 0) {
  const square = document.querySelectorAll(".intro-square")[index];
  if (square) {
    console.log(`\nüñ±Ô∏è Simulating click on rectangle ${index}...`);
    square.click();
    setTimeout(() => {
      const active =
        document.querySelector(".intro-active-diamond--smallest") ||
        document.querySelector(".intro-active-diamond--mobile");
      if (active) {
        console.log("‚úÖ Rectangle opened!");
        console.log("Active diamond:", active);
      } else {
        console.log("‚ùå Rectangle did not open");
      }
    }, 100);
  } else {
    console.log(`‚ùå Rectangle ${index} not found`);
  }
};

// 7. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
console.log("\nüìù Test Commands:");
console.log("  testRectangleClick(0) - Click first rectangle");
console.log("  testRectangleClick(1) - Click second rectangle");
console.log("  testRectangleClick(2) - Click third rectangle");
console.log("  testRectangleClick(3) - Click fourth rectangle");

console.log("\nüí° Expected Behavior:");
if (isSmallest) {
  console.log("  ‚úÖ Fullscreen modal");
  console.log("  ‚úÖ Close button visible");
  console.log("  ‚úÖ Fixed positioning");
  console.log("  ‚úÖ No hover effect");
  console.log("  ‚úÖ Other rectangles stay in place");
} else if (isMobile) {
  console.log("  ‚úÖ Mobile layout");
  console.log("  ‚úÖ Close button visible");
  console.log("  ‚úÖ Rectangle enlarges");
  console.log("  ‚ùå Not fullscreen");
} else {
  console.log("  ‚úÖ Desktop layout");
  console.log("  ‚úÖ Hover effects");
  console.log("  ‚úÖ Rotation on active");
  console.log("  ‚ùå No close button");
}

console.log(
  "\nüîÑ To re-run this test: Paste this code again or refresh the page\n"
);
