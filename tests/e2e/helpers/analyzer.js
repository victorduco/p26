import fs from 'fs';
import path from 'path';

const writeLine = (text = '') => process.stdout.write(`${text}\n`);

/**
 * Analyze test results and generate detailed report
 */
export function analyzeResults(results) {
  const analysis = {
    summary: {},
    details: {},
    timeline: [],
    recommendations: []
  };

  // Resize metrics analysis
  if (results.resize) {
    const durations = results.resize.details?.map(d => d.duration) || [];

    analysis.summary.resize = {
      avg: results.resize.avgDuration,
      min: results.resize.minDuration || Math.min(...durations),
      max: results.resize.maxDuration || Math.max(...durations),
      median: calculateMedian(durations),
      std: calculateStdDev(durations),
      total: durations.reduce((a, b) => a + b, 0)
    };

    // Detect performance degradation
    if (results.resize.details) {
      const firstHalf = durations.slice(0, Math.floor(durations.length / 2));
      const secondHalf = durations.slice(Math.floor(durations.length / 2));
      const firstAvg = average(firstHalf);
      const secondAvg = average(secondHalf);

      analysis.details.degradation = {
        firstHalfAvg: firstAvg,
        secondHalfAvg: secondAvg,
        degradationPercent: ((secondAvg - firstAvg) / firstAvg * 100).toFixed(2),
        isDegrading: secondAvg > firstAvg * 1.2 // 20% slower
      };
    }
  }

  // FPS metrics analysis
  if (results.fps) {
    analysis.summary.fps = {
      avg: results.fps.avg,
      min: results.fps.min,
      max: results.fps.max,
      median: calculateMedian(results.fps.history || []),
      std: calculateStdDev(results.fps.history || [])
    };

    // FPS health check
    const avgFps = results.fps.avg;
    if (avgFps >= 60) {
      analysis.details.fpsHealth = 'Excellent (60+ FPS)';
    } else if (avgFps >= 30) {
      analysis.details.fpsHealth = 'Good (30-60 FPS)';
    } else if (avgFps >= 15) {
      analysis.details.fpsHealth = 'Poor (15-30 FPS)';
    } else {
      analysis.details.fpsHealth = 'Critical (<15 FPS)';
    }
  }

  // Memory metrics
  if (results.memory) {
    analysis.summary.memory = {
      used: results.memory.used,
      total: results.memory.total,
      usagePercent: ((results.memory.used / results.memory.total) * 100).toFixed(2),
      available: results.memory.total - results.memory.used
    };

    if (results.memory.used / results.memory.total > 0.9) {
      analysis.recommendations.push('‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (>90%)');
    }
  }

  // Build timeline
  if (results.resize?.details) {
    let currentTime = 0;
    analysis.timeline = results.resize.details.map((resize, i) => {
      const entry = {
        second: (currentTime / 1000).toFixed(2),
        iteration: resize.iteration,
        fps: resize.fps || 'N/A',
        duration: resize.duration,
        size: `${resize.to.width}x${resize.to.height}`
      };
      currentTime += resize.duration;
      return entry;
    });
  }

  // Performance recommendations
  if (analysis.summary.fps?.avg < 30) {
    analysis.recommendations.push('üêå –°—Ä–µ–¥–Ω–∏–π FPS –Ω–∏–∂–µ 30 - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥');
  }

  if (analysis.details.degradation?.isDegrading) {
    analysis.recommendations.push('üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π');
  }

  if (analysis.summary.resize?.max > analysis.summary.resize?.avg * 3) {
    analysis.recommendations.push('‚ö° –ë–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—Å–∞–π–∑–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å');
  }

  return analysis;
}

/**
 * Print detailed analysis report
 */
export function printDetailedReport(analysis, results = {}) {
  writeLine();
  writeLine('‚ïê'.repeat(80));
  writeLine('                        –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò');
  writeLine('‚ïê'.repeat(80));

  // Total test time
  if (results.totalTime) {
    writeLine();
    writeLine('‚è±Ô∏è  –û–ë–©–ï–ï –í–†–ï–ú–Ø:');
    writeLine('‚îÄ'.repeat(80));
    writeLine(`  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:       ${results.totalTime.seconds}s (${results.totalTime.ms}ms)`);
  }

  // Resize Summary
  if (analysis.summary.resize) {
    const r = analysis.summary.resize;
    writeLine();
    writeLine('üìè RESIZE –ú–ï–¢–†–ò–ö–ò:');
    writeLine('‚îÄ'.repeat(80));
    writeLine(`  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:     ${r.avg.toFixed(2)}ms`);
    writeLine(`  –ú–µ–¥–∏–∞–Ω–∞:           ${r.median.toFixed(2)}ms`);
    writeLine(`  Min/Max:           ${r.min}ms / ${r.max}ms`);
    writeLine(`  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª:  ${r.std.toFixed(2)}ms`);
    writeLine(`  –û–±—â–µ–µ –≤—Ä–µ–º—è:       ${r.total}ms (${(r.total / 1000).toFixed(2)}s)`);
  }

  // Degradation analysis
  if (analysis.details.degradation) {
    const d = analysis.details.degradation;
    writeLine();
    writeLine('üìä –ê–ù–ê–õ–ò–ó –î–ï–ì–†–ê–î–ê–¶–ò–ò:');
    writeLine('‚îÄ'.repeat(80));
    writeLine(`  –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞:   ${d.firstHalfAvg.toFixed(2)}ms`);
    writeLine(`  –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞:   ${d.secondHalfAvg.toFixed(2)}ms`);
    writeLine(`  –ò–∑–º–µ–Ω–µ–Ω–∏–µ:         ${d.degradationPercent > 0 ? '+' : ''}${d.degradationPercent}%`);
    writeLine(`  –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è:        ${d.isDegrading ? '‚ö†Ô∏è  –î–ê' : '‚úÖ –ù–ï–¢'}`);
  }

  // FPS Summary
  if (analysis.summary.fps) {
    const f = analysis.summary.fps;
    writeLine();
    writeLine('üéÆ FPS –ú–ï–¢–†–ò–ö–ò:');
    writeLine('‚îÄ'.repeat(80));
    writeLine(`  –°—Ä–µ–¥–Ω–∏–π FPS:       ${f.avg.toFixed(2)}`);
    writeLine(`  –ú–µ–¥–∏–∞–Ω–∞ FPS:       ${f.median.toFixed(2)}`);
    writeLine(`  Min/Max FPS:       ${f.min} / ${f.max}`);
    if (results.finalMetrics?.avgFrameTime) {
      writeLine(`  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞: ${results.finalMetrics.avgFrameTime}ms (—Ü–µ–ª—å: <16.67ms –¥–ª—è 60fps)`);
    }
    writeLine(`  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª:  ${f.std.toFixed(2)}`);
    writeLine(`  –°–æ—Å—Ç–æ—è–Ω–∏–µ:         ${analysis.details.fpsHealth}`);
  }

  // Memory Summary
  if (analysis.summary.memory) {
    const m = analysis.summary.memory;
    writeLine();
    writeLine('üíæ –ü–ê–ú–Ø–¢–¨:');
    writeLine('‚îÄ'.repeat(80));
    writeLine(`  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:      ${m.used}MB / ${m.total}MB`);
    writeLine(`  –ü—Ä–æ—Ü–µ–Ω—Ç:           ${m.usagePercent}%`);
    writeLine(`  –î–æ—Å—Ç—É–ø–Ω–æ:          ${m.available}MB`);
  }

  // Long Tasks Summary
  if (results.finalMetrics?.longTasks) {
    const lt = results.finalMetrics.longTasks;
    writeLine();
    writeLine('‚è≥ –î–û–õ–ì–ò–ï –ó–ê–î–ê–ß–ò (>50ms):');
    writeLine('‚îÄ'.repeat(80));
    writeLine(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:        ${lt.count}`);
    writeLine(`  –û–±—â–µ–µ –≤—Ä–µ–º—è:       ${lt.totalDuration}ms`);
    if (lt.count > 0) {
      const avgDuration = (lt.totalDuration / lt.count).toFixed(2);
      writeLine(`  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:     ${avgDuration}ms`);
      writeLine(`  –°–æ—Å—Ç–æ—è–Ω–∏–µ:         ${lt.count > 10 ? '‚ö†Ô∏è  –ú–ù–û–ì–û' : lt.count > 5 ? '‚ö° –ù–û–†–ú–ê' : '‚úÖ –•–û–†–û–®–û'}`);
    }
  }

  // Navigation Timing
  if (results.finalMetrics?.navigation) {
    const nav = results.finalMetrics.navigation;
    writeLine();
    writeLine('üöÄ –í–†–ï–ú–Ø –ó–ê–ì–†–£–ó–ö–ò:');
    writeLine('‚îÄ'.repeat(80));
    if (nav.domContentLoaded) writeLine(`  DOM –≥–æ—Ç–æ–≤:         ${nav.domContentLoaded}ms`);
    if (nav.domInteractive) writeLine(`  DOM –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–µ–Ω:  ${nav.domInteractive}ms`);
    if (nav.loadComplete) writeLine(`  –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:   ${nav.loadComplete}ms`);
  }

  // Timeline
  if (analysis.timeline && analysis.timeline.length > 0) {
    writeLine();
    writeLine('‚è±Ô∏è  –¢–ê–ô–ú–õ–ê–ô–ù:');
    writeLine('‚îÄ'.repeat(80));
    writeLine('  –°–µ–∫—É–Ω–¥–∞  | –ò—Ç–µ—Ä–∞—Ü–∏—è | FPS  | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | –†–∞–∑–º–µ—Ä');
    writeLine('  ' + '‚îÄ'.repeat(76));

    // Show first 5, middle sample, and last 5
    const tl = analysis.timeline;
    const samples = [
      ...tl.slice(0, 5),
      ...(tl.length > 15 ? [{ second: '...', iteration: '...', fps: '...', duration: '...', size: '...' }] : []),
      ...tl.slice(-5)
    ];

    samples.forEach(entry => {
      const sec = String(entry.second).padEnd(8);
      const iter = String(entry.iteration).padEnd(8);
      const fps = String(entry.fps).padEnd(4);
      const dur = String(entry.duration + 'ms').padEnd(12);
      writeLine(`  ${sec} | ${iter} | ${fps} | ${dur} | ${entry.size}`);
    });
  }

  // Recommendations
  if (analysis.recommendations.length > 0) {
    writeLine();
    writeLine('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    writeLine('‚îÄ'.repeat(80));
    analysis.recommendations.forEach(rec => {
      writeLine(`  ${rec}`);
    });
  }

  writeLine();
  writeLine('‚ïê'.repeat(80));
  writeLine();
}

/**
 * Save detailed analysis to file
 */
export function saveAnalysis(testName, analysis) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `${testName}-analysis-${timestamp}.json`;
  const filepath = path.join(process.cwd(), 'tests/e2e/results', filename);

  const data = {
    testName,
    timestamp: new Date().toISOString(),
    analysis
  };

  fs.writeFileSync(filepath, JSON.stringify(data, null, 2));
  writeLine(`üìä –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);

  return filepath;
}

// Helper functions
function average(arr) {
  if (arr.length === 0) return 0;
  return arr.reduce((a, b) => a + b, 0) / arr.length;
}

function calculateMedian(arr) {
  if (arr.length === 0) return 0;
  const sorted = [...arr].sort((a, b) => a - b);
  const mid = Math.floor(sorted.length / 2);
  return sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;
}

function calculateStdDev(arr) {
  if (arr.length === 0) return 0;
  const avg = average(arr);
  const squareDiffs = arr.map(value => Math.pow(value - avg, 2));
  const avgSquareDiff = average(squareDiffs);
  return Math.sqrt(avgSquareDiff);
}
